name: COPR Build

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to build"
        required: true
        default: "0.1.0"

permissions:
  contents: write # Required for uploading release assets

env:
  PACKAGE_NAME: pushover

jobs:
  build-copr:
    name: Build RPM on COPR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION=${VERSION#v}  # Remove 'v' prefix if present
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Update spec file version
        run: |
          # Update version in spec file for consistency (COPR will use git content)
          sed -i "s/^Version:.*/Version:        ${{ steps.version.outputs.version }}/" ${{ env.PACKAGE_NAME }}.spec

      - name: Create source tarball
        run: |
          # Create tarball for artifacts and manual distribution (not used by COPR build)
          sed -i "s/VERSION=.*/VERSION=\"${{ steps.version.outputs.version }}\"/" make-tarball.sh
          ./make-tarball.sh

      - name: Upload tarball as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.version }}-source
          path: ${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.version }}.tar.gz

      - name: Upload to release (if release event)
        if: github.event_name == 'release'
        run: |
          TARBALL_NAME="${{ env.PACKAGE_NAME }}-${{ steps.version.outputs.version }}.tar.gz"

          # Verify tarball exists
          if [ ! -f "$TARBALL_NAME" ]; then
            echo "Error: Tarball $TARBALL_NAME not found"
            exit 1
          fi

          echo "Uploading tarball to release ${{ github.event.release.tag_name }}..."
          if ! gh release upload ${{ github.event.release.tag_name }} \
            "$TARBALL_NAME" \
            --clobber; then
            echo "Failed to upload tarball to release"
            exit 1
          fi
          echo "Tarball successfully uploaded to release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install COPR CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install copr-cli

      - name: Configure COPR CLI
        run: |
          mkdir -p ~/.config
          cat > ~/.config/copr << EOF
          [copr-cli]
          login = ${{ secrets.COPR_LOGIN }}
          username = ${{ secrets.COPR_USERNAME }}
          token = ${{ secrets.COPR_TOKEN }}
          copr_url = https://copr.fedorainfracloud.org
          EOF

      - name: Submit COPR build
        run: |
          # Validate required variables and secrets
          if [ -z "${{ vars.COPR_PROJECT }}" ]; then
            echo "Error: COPR_PROJECT variable is not set. Should be in format 'username/projectname'"
            exit 1
          fi

          if [ -z "${{ secrets.COPR_LOGIN }}" ] || [ -z "${{ secrets.COPR_TOKEN }}" ]; then
            echo "Error: COPR authentication secrets (COPR_LOGIN, COPR_TOKEN) are not set"
            exit 1
          fi

          # Set commit reference based on event type
          if [ "${{ github.event_name }}" = "release" ]; then
            COMMIT_REF="${{ github.event.release.tag_name }}"
          else
            COMMIT_REF="${{ github.sha }}"
          fi

          # Debug output
          echo "COPR Project: ${{ vars.COPR_PROJECT }}"
          echo "Clone URL: ${{ github.server_url }}/${{ github.repository }}"
          echo "Commit Reference: $COMMIT_REF"
          echo "Spec File: ${{ env.PACKAGE_NAME }}.spec"

          # Test COPR authentication first
          echo "Testing COPR authentication..."
          copr-cli whoami

          # Submit build to COPR using buildscm (builds directly from git repository)
          # This approach clones the git repo and builds from source, using the spec file in the repo
          echo "Submitting build to COPR..."
          copr-cli buildscm "${{ vars.COPR_PROJECT }}" \
            --clone-url "${{ github.server_url }}/${{ github.repository }}" \
            --commit "$COMMIT_REF" \
            --spec "${{ env.PACKAGE_NAME }}.spec" \
            --nowait

      - name: Comment on PR (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "COPR build submitted for version ${{ steps.version.outputs.version }}"
          echo "Check build status at: https://copr.fedorainfracloud.org/coprs/${{ secrets.COPR_USERNAME }}/${{ secrets.COPR_PROJECT }}/builds/"
